name: "Continuous integration - Automated testing"
on: workflow_call

jobs:
  test:
    name: "Automated testing"
    runs-on: ubuntu-latest
    steps:
    ###
    # Checkout repository
    ###
    - name: Checkout repository
      uses: actions/checkout@v3
    ###
    # ðŸ§° Install .Net SDKs
    #
    # Configure the pipeline to use the correct .Net sdk versions
    ###
    - name: ðŸ§° Install .Net SDKs
      uses: actions/setup-dotnet@v2
      with:
        include-prerelease: true
        dotnet-version: |
          3.1.x
          6.0.x
    ###
    # ðŸ§° Setup .Net tools
    #
    # Register tools necessary to run the `test` pipeline-job
    ###
    - name: ðŸ§° Setup .NET tools
      run: |-
        dotnet tool install --global dotnet-reportgenerator-globaltool
        dotnet tool install --global dotnet-coverage
        dotnet tool install --global coverlet.console
    ###
    # ðŸ§° Set up JDK 11
    ###
    - name: ðŸ§° Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    ###
    # ðŸ§° Cache SonarCloud packages
    ###
    - name: ðŸ§° Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    ###
    # ðŸ§° Install SonarCloud scanner
    ###
    - name: ðŸ§° Install SonarCloud scanner
      shell: pwsh
      run: |-
        [System.IO.Directory]::CreateDirectory('${{github.workspace}}/.sonar/scanner')
        dotnet tool install dotnet-sonarscanner --tool-path '${{github.workspace}}/.sonar/scanner'
    ###
    # ðŸ—ƒ Restore dependencies
    #
    # Fill the NuGet store with necessary libraries
    ###
    - name: ðŸ—ƒ Restore dependencies
      run: dotnet restore
    ###
    # ðŸ—ƒ Restore 'library-binaries'
    ###
    - name: ðŸ—ƒ Restore 'library-binaries'
      uses: actions/download-artifact@v3
      with:
        name: library-binaries
        path: ./src
    ###
    # ðŸ—ƒ Restore 'test-binaries'
    ###
    - name: ðŸ—ƒ Restore 'test-binaries'
      uses: actions/download-artifact@v3
      with:
        name: test-binaries
        path: ./src
    ###
    # ðŸ—ƒ Restore 'benchmark-binaries'
    #
    # Because `dotnet test` tries to load all csproj files, we need these dlls.
    ###
    - name: ðŸ—ƒ Restore 'benchmark-binaries'
      uses: actions/download-artifact@v3
      with:
        name: benchmark-binaries
        path: ./src
    ###
    # ðŸ§ª Run unit tests
    #
    # Run the unit tests of category `UnitTest` and generate a code coverage report.
    ###
    - name: ðŸ§ª Run unit tests
      run: >-
        dotnet test --verbosity:normal
        --no-build --no-restore --nologo
        --configuration="Release"
        --logger:"console;verbosity=detailed"
        --logger:"GitHubActions"
        --logger "trx;LogFileName=test-results.trx"
        --collect "DotnetCodeCoverage"
        --collect "XPlat Code coverage"
        --results-directory:"${{github.workspace}}/test-results"
        --filter:"Category=UnitTest"
        /p:CollectCoverage="true"
        /p:CoverletOutputFormat="opencover"
        /p:CoverletOutput="${{github.workspace}}/test-results/coverage/"
        /p:MergeWith="${{github.workspace}}/test-results/coverage/"
        /p:Exclude="[*Tests]*%2c[*TestUtils]*%2c[*UseCase*]*"
        /clp:forceconsolecolor
        "${{github.workspace}}/FluentSerializer.sln";

        reportgenerator
        -reports:"${{github.workspace}}/test-results/*/coverage.cobertura.xml"
        -targetdir:"${{github.workspace}}/test-results/coverage"
        -reporttypes:HtmlInline_AzurePipelines\;Cobertura;
      working-directory: ${{github.workspace}}
    ###
    # ðŸ§ª Run integration tests
    #
    # Run the unit tests of category `IntegrationTest` to verify the integration of various unit-tests.
    ###
    - name: ðŸ§ª Run integration tests
      run: >-
        dotnet test --verbosity:normal
        --no-build --no-restore --nologo
        --configuration="Release"
        --logger:"console;verbosity=detailed"
        --logger:"GitHubActions"
        --filter:"Category=IntegrationTest"
        /clp:forceconsolecolor
        "${{github.workspace}}/FluentSerializer.sln";
      working-directory: ${{github.workspace}}
    ###
    # ðŸ§ª Run use-case tests
    #
    # Run the unit tests of category `UseCase` to illustrate the library still works as intended.
    # This is basically a kind of integration test.
    ###
    - name: ðŸ§ª Run use-case tests
      run: >-
        dotnet test --verbosity:normal
        --no-build --no-restore --nologo
        --configuration="Release"
        --logger:"console;verbosity=detailed"
        --logger:"GitHubActions"
        --filter:"Category=UseCase"
        /clp:forceconsolecolor
        "${{github.workspace}}/FluentSerializer.sln";
      working-directory: ${{github.workspace}}
    ###
    # ðŸ—ƒ Publish 'unit-test-coverage' artifacts
    ###
    - name: ðŸ—ƒ Publish 'unit-test-coverage' artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: unit-test-coverage
        path: ./test-results/coverage
        retention-days: 1