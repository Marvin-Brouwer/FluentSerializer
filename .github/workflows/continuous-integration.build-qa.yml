name: "Continuous integration - Quality Assurance"
on:
  workflow_call:
    secrets:
      SONAR_TOKEN:
        required: true

jobs:
  build-test:
    name: "QA"
    runs-on: ubuntu-latest
    steps:
    ###
    # Checkout repository
    ###
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        lfs: true
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    ###
    # ðŸ§° Install .Net SDKs
    #
    # Configure the pipeline to use the correct .Net sdk versions
    ###
    - name: ðŸ§° Install .Net SDKs
      uses: actions/setup-dotnet@v3
      with:
        dotnet-quality: 'preview'
        dotnet-version: 7.0.x
    ###
    # ðŸ§° Setup .Net tools
    #
    # Register tools necessary to run the `test` pipeline-job
    ###
    - name: ðŸ§° Setup .NET tools
      run: |-
        dotnet tool install --global dotnet-reportgenerator-globaltool
        dotnet tool install --global dotnet-coverage
        dotnet tool install --global coverlet.console
    ###
    # ðŸ§° Setup SonarCloud scanner
    #
    # Installs and initializes the SonarCloud scanner
    ###
    - name: ðŸ§° Setup SonarCloud scanner
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: >-
        [System.IO.Directory]::CreateDirectory('${{github.workspace}}/.sonar/scanner')

        dotnet tool install dotnet-sonarscanner --tool-path '${{github.workspace}}/.sonar/scanner'

        ./.sonar/scanner/dotnet-sonarscanner begin
        /k:"Marvin-Brouwer_FluentSerializer"
        /o:"marvin-brouwer"
        /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        /d:sonar.host.url="https://sonarcloud.io"
        /s:"${{github.workspace}}/SonarQube.Analysis.xml"
    ###
    # ðŸ›  Build
    ###
    - name: ðŸ›  Build
      run: |-
        dotnet build --nologo --configuration "Release"
    ###
    # ðŸ§ª Run unit tests
    #
    # Run the unit tests of category `UnitTest` and generate a code coverage report.
    ###
    - name: ðŸ§ª Run unit tests
      run: >-
        echo "## Test results  " >>$GITHUB_STEP_SUMMARY

        dotnet test --verbosity:normal
        --no-build --no-restore --nologo
        --configuration="Release"
        --logger:"console;verbosity=detailed"
        --logger:"GitHubActions"
        --logger "trx;LogFileName=test-results.trx"
        --collect "DotnetCodeCoverage"
        --collect "XPlat Code coverage"
        --results-directory:"${{github.workspace}}/test-results"
        --filter:"Category=UnitTest"
        /p:CollectCoverage="true"
        /p:CoverletOutputFormat="opencover"
        /p:CoverletOutput="${{github.workspace}}/test-results/coverage/"
        /p:MergeWith="${{github.workspace}}/test-results/coverage/"
        /p:Exclude="[*Tests]*%2c[*TestUtils]*%2c[*UseCase*]*"
        /clp:forceconsolecolor
        "${{github.workspace}}/FluentSerializer.sln";

        reportgenerator
        -reports:"${{github.workspace}}/test-results/*/coverage.cobertura.xml"
        -targetdir:"${{github.workspace}}/test-results/coverage"
        -reporttypes:HtmlInline_AzurePipelines\;Cobertura\;SonarQube;

        echo "  " >>$GITHUB_STEP_SUMMARY
      working-directory: ${{github.workspace}}
    ###
    # ðŸ§ª Run integration tests
    #
    # Run the unit tests of category `IntegrationTest` to verify the integration of various unit-tests.
    ###
    - name: ðŸ§ª Run integration tests
      run: >-
        dotnet test --verbosity:normal
        --no-build --no-restore --nologo
        --configuration="Release"
        --logger:"console;verbosity=detailed"
        --logger:"GitHubActions"
        --filter:"Category=IntegrationTest"
        /clp:forceconsolecolor
        "${{github.workspace}}/FluentSerializer.sln";
      working-directory: ${{github.workspace}}
    ###
    # ðŸ§ª Run use-case tests
    #
    # Run the unit tests of category `UseCase` to illustrate the library still works as intended.
    # This is basically a kind of integration test.
    ###
    - name: ðŸ§ª Run use-case tests
      run: >-
        dotnet test --verbosity:normal
        --no-build --no-restore --nologo
        --configuration="Release"
        --logger:"console;verbosity=detailed"
        --logger:"GitHubActions"
        --filter:"Category=UseCase"
        /clp:forceconsolecolor
        "${{github.workspace}}/FluentSerializer.sln";
      working-directory: ${{github.workspace}}
    ###
    # ðŸ—ƒ Publish 'unit-test-coverage' artifacts
    ###
    - name: ðŸ—ƒ Publish 'unit-test-coverage' artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: unit-test-coverage
        path: ./test-results/coverage
        retention-days: 1
    ###
    # ðŸ”¬ Perform SonarCloud Analysis
    ###
    - name: ðŸ”¬ Perform SonarCloud Analysis
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: >-
        ./.sonar/scanner/dotnet-sonarscanner end
        /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
    ###
    # ðŸ”¬ SonarCloud Quality Gate
    ###
    - name: ðŸ”¬ SonarCloud Quality Gate
      id: sonarcloud-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt
    ###
    # ðŸ”¬ Report SonarCloud Quality Gate
    ###
    - name: ðŸ”¬ Report SonarCloud Quality Gate
      if: always()
      run: |-
        dashboardUrl=$(sed -n '5p' .sonarqube/out/.sonar/report-task.txt | cut -d '=' -f 2-);

        echo "## SonarCloud Scan  " >>$GITHUB_STEP_SUMMARY
        echo "[Show in SonarCloud](${dashboardUrl})" >>$GITHUB_STEP_SUMMARY