name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, edited, synchronize, reopened, review_requested, auto_merge_enabled]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    ###
    # Checkout repository
    ###
    - name: Checkout repository
      uses: actions/checkout@v2
    ###
    # 🧰 Setup .Net
    #
    # Configure the pipeline to use the correct .Net sdk versions
    ###
    - name: 🧰 Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        include-prerelease: true
        dotnet-version: | 
          3.1.x
          5.0.x
          6.0.x
    ###
    # 🗃 Restore dependencies
    #
    # Fill the NuGet store with necessary libraries
    ###
    - name: 🗃 Restore dependencies
      run: dotnet restore
    ###
    # 🛠 Build
    #
    # Build the library code for later use
    ###
    - name: 🛠 Build
      run: dotnet build --no-restore --nologo --configuration "Release" 
    ###
    # 🗃 Publish 'library-binaries' artifacts
    ###
    - name: 🗃 Publish 'library-binaries' artifacts
      uses: actions/upload-artifact@v2
      with:
        name: library-binaries
        path: |
          ./src/**/bin/Release/*/*.*
          !./src/*.Tests
          !./src/*.TestUtils
          !./src/*.Usecase.*
          !./src/*.Benchmark
          !./src/*.BenchmarkUtils
        retention-days: 1
      if: ${{ always() }}
    ###
    # 🗃 Publish 'test-binaries' artifacts
    ###
    - name: 🗃 Publish 'test-binaries' artifacts
      uses: actions/upload-artifact@v2
      with:
        name: test-binaries
        path: |
          ./src/**/obj/Release/*/*.*
          ./src/*.Tests/bin/Release/*/*.*
          ./src/*.TestUtils/bin/Release/*/*.*
          ./src/*.Usecase.*/bin/Release/*/*.*
        retention-days: 1
      if: ${{ always() }}
    ###
    # 🗃 Publish 'benchmark-binaries' artifacts
    ###
    - name: 🗃 Publish 'benchmark-binaries' artifacts
      uses: actions/upload-artifact@v2
      with:
        name: benchmark-binaries
        path: |
          ./src/*.Benchmark/bin/Release/*/*.*
          ./src/*.Benchmark/bin/Release/*/ref/*.*
          ./src/*.Benchmark/obj/Release/*/apphost
          ./src/*.BenchmarkUtils/bin/Release/*/*.*
          ./src/*.TestUtils/bin/Release/*/*.*
        retention-days: 1
      if: ${{ always() }}

  test:

    runs-on: ubuntu-latest
    needs: build

    steps:
    ###
    # Checkout repository
    ###
    - name: Checkout repository
      uses: actions/checkout@v2
    ###
    # 🧰 Setup .Net
    #
    # Configure the pipeline to use the correct .Net sdk versions
    ###
    - name: 🧰 Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        include-prerelease: true
        dotnet-version: | 
          3.1.x
          5.0.x
          6.0.x
    ###
    # 🧰 Setup .Net tools
    #
    # Register tools necessary to run the `test` pipeline-job
    ###
    - name: 🧰 Setup .NET tools
      run: |-
        dotnet tool install --global dotnet-reportgenerator-globaltool
        dotnet tool install --global dotnet-coverage
        dotnet tool install --global coverlet.console
    ###
    # 🗃 Restore dependencies
    #
    # Fill the NuGet store with necessary libraries
    ###
    - name: 🗃 Restore dependencies
      run: dotnet restore
    ###
    # 🗃 Restore 'library-binaries'
    ###
    - name: 🗃 Restore 'library-binaries'
      uses: actions/download-artifact@v2
      with:
        name: library-binaries
        path: ./src
    ###
    # 🗃 Restore 'test-binaries'
    ###   
    - name: 🗃 Restore 'test-binaries'
      uses: actions/download-artifact@v2
      with:
        name: test-binaries
        path: ./src  
    ###
    # 🗃 Restore 'benchmark-binaries'
    #
    # Because `dotnet test` tries to load all csproj files, we need these dlls. 
    ###
    - name: 🗃 Restore 'benchmark-binaries'
      uses: actions/download-artifact@v2
      with:
        name: benchmark-binaries
        path: ./src   
    ###
    # 🧪 Run unit tests
    #
    # Run the unit tests of category `UnitTest` and generate a code coverage report.
    ###
    - name: 🧪 Run unit tests
      run: >-
        dotnet test --verbosity:normal
        --no-build --no-restore --nologo
        --configuration="Release"
        --logger:"console;verbosity=detailed"
        --logger:"GitHubActions"
        --logger "trx;LogFileName=test-results.trx"
        --collect "DotnetCodeCoverage"
        --collect "XPlat Code coverage"
        --results-directory:"${{github.workspace}}/test-results"
        --filter:"Category=UnitTest"
        /p:CollectCoverage="true"
        /p:CoverletOutputFormat="opencover"
        /p:CoverletOutput="${{github.workspace}}/test-results/coverage/"
        /p:MergeWith="${{github.workspace}}/test-results/coverage/"
        /p:Exclude="[*Tests]*%2c[*TestUtils]*%2c[*UseCase*]*"
        /clp:forceconsolecolor
        "${{github.workspace}}/FluentSerializer.sln";
        
        reportgenerator
        -reports:"${{github.workspace}}/test-results/*/coverage.cobertura.xml"
        -targetdir:"${{github.workspace}}/test-results/coverage"
        -reporttypes:HtmlInline_AzurePipelines\;Cobertura;
      working-directory: ${{github.workspace}} 
    ###
    # 🧪 Run use-case tests
    #
    # Run the unit tests of category `UseCase` to illustrate the library still works as intended.
    # This is basically a kind of integration test.
    ###
    - name: 🧪 Run use-case tests
      run:  >- 
        dotnet test --verbosity:normal
        --no-build --no-restore --nologo
        --configuration="Release"
        --logger:"console;verbosity=detailed"
        --logger:"GitHubActions"
        --filter:"Category=UseCase"
        /clp:forceconsolecolor
        "${{github.workspace}}/FluentSerializer.sln";
      working-directory: ${{github.workspace}}
    ###
    # 🗃 Publish 'unit-test-coverage' artifacts
    ###
    - name: 🗃 Publish 'unit-test-coverage' artifacts
      uses: actions/upload-artifact@v2
      with:
        name: unit-test-coverage
        path: ./test-results/coverage
        retention-days: 1
      if: ${{ always() }}

  benchmark:

    runs-on: ubuntu-latest
    needs: build

    steps:
    ###
    # Checkout repository
    ###
    - name: Checkout repository
      uses: actions/checkout@v2
    ###
    # 🧰 Setup .Net
    #
    # Configure the pipeline to use the correct .Net sdk versions
    ###
    - name: 🧰 Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        include-prerelease: true
        dotnet-version: | 
          3.1.x
          5.0.x
          6.0.x
    ###
    # 🗃 Restore dependencies
    #
    # Fill the NuGet store with necessary libraries
    ###
    - name: 🗃 Restore dependencies
      run: dotnet restore
    ###
    # 🗃 Restore 'library-binaries'
    ###
    - name: 🗃 Restore 'library-binaries'
      uses: actions/download-artifact@v2
      with:
        name: library-binaries
        path: ./src
    ###
    # 🗃 Restore 'benchmark-binaries'
    ###
    - name: 🗃 Restore 'benchmark-binaries'
      uses: actions/download-artifact@v2
      with:
        name: benchmark-binaries
        path: ./src  
    ###
    # ⏱ Benchmark XML serializer
    #
    # Benchmark the code for serializing and deserializing a test set of XML data.
    ###
    - name: ⏱ Benchmark XML serializer
      run: |-
        sudo chmod +rwx ./*/FluentSerializer.Xml.Benchmark 
        sudo ./net5.0/FluentSerializer.Xml.Benchmark --cli "/usr/bin/dotnet" 
        sudo ./netcoreapp3.1/FluentSerializer.Xml.Benchmark --no-generate --cli "/usr/bin/dotnet" 
      working-directory: ${{github.workspace}}/src/FluentSerializer.Xml.Benchmark/bin/Release
    ###
    # ⏱ Benchmark JSON serializer
    #
    # Benchmark the code  for serializing and deserializing a test set of JSON data.
    ###
    - name: ⏱ Benchmark JSON serializer
      run: |-
        sudo chmod +rwx ./*/FluentSerializer.Json.Benchmark 
        sudo ./net5.0/FluentSerializer.Json.Benchmark --cli "/usr/bin/dotnet" 
        sudo ./netcoreapp3.1/FluentSerializer.Json.Benchmark --no-generate --cli "/usr/bin/dotnet" 
      working-directory: ${{github.workspace}}/src/FluentSerializer.Json.Benchmark/bin/Release
    ###
    # 🗃 Collect benchmark reports
    ###
    - name: 🗃 Collect benchmark reports
      run: |-
        sudo mkdir ${{github.workspace}}/benchmark-results
        cd ${{github.workspace}}/src/FluentSerializer.Xml.Benchmark/bin/Release/BenchmarkDotNet.Artifacts/results
        sudo mv ./xml-*.md ${{github.workspace}}/benchmark-results/
        cd ${{github.workspace}}/src/FluentSerializer.Json.Benchmark/bin/Release/BenchmarkDotNet.Artifacts/results
        sudo mv ./json-*.md ${{github.workspace}}/benchmark-results/
      working-directory: ${{github.workspace}}
      if: ${{ always() }}
    ###
    # 🗃 Publish 'benchmark-results' artifacts
    ###
    - name: 🗃 Publish 'benchmark-results' artifacts
      uses: actions/upload-artifact@v2
      with:
        name: benchmark-results
        path: ${{github.workspace}}/benchmark-results
        retention-days: 1
      if: ${{ always() }}