name: "Continuous integration - Benchmarking"
on:
  workflow_call:
    inputs:
      libraryName:
        description: 'The library to benchmark'
        required: true
        type: string
      reportPrefix:
        description: 'The library to benchmark'
        required: true
        type: string
      jobType:
        description: 'The jobType for net 6 runtime'
        required: false
        default: "Default"
        type: string

jobs:
  benchmark:
    name: "Benchmark ${{ inputs.libraryName }}"
    strategy:
      fail-fast: true
      matrix:
        version: [net7.0, net6.0, netcoreapp3.1]
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    ###
    # Checkout repository
    ###
    - name: Checkout repository
      uses: actions/checkout@v3
    ###
    # 🧰 Install .Net SDKs
    #
    # Configure the pipeline to use the correct .Net sdk versions
    ###
    - name: 🧰 Install .Net SDKs
      uses: actions/setup-dotnet@v3
      with:
        dotnet-quality: 'preview'
        dotnet-version: ${{ matrix.version }}
    ###
    # 🗃 Restore dependencies
    #
    # Fill the NuGet store with necessary libraries
    ###
    - name: 🗃 Restore dependencies
      run: dotnet restore
    ###
    # 🗃 Set library version
    ###
    - name: 🗃 Set library version
      run: |
        if ${matrix.version} == "netcoreapp3.1"; then
          echo "libVersion=netcore2.1" >> $GITHUB_ENV
        else
          echo "libVersion=${matrix.version}" >> $GITHUB_ENV
        fi
    ###
    # 🗃 Restore 'library-binaries-${{ env.libVersion }}'
    ###
    - name: 🗃 Restore 'library-binaries-${{ env.libVersion }}'
      uses: actions/download-artifact@v3
      with:
        name: library-binaries-${{ env.libVersion }}
        path: ./src
    ###
    # 🗃 Restore 'benchmark-binaries'
    ###
    - name: 🗃 Restore 'benchmark-binaries'
      uses: actions/download-artifact@v3
      with:
        name: benchmark-binaries
        path: ./src
    ###
    # ⏱ Benchmark FluentSerializer.${{ inputs.libraryName }} (${{ matrix.version }})
    #
    # Benchmark the code in the given library (in dotnet 7)
    ###
    - name: ⏱ Benchmark FluentSerializer.${{ inputs.libraryName }} (${{ matrix.version }})
      run: |-
        sudo chmod +rwx ./*/FluentSerializer.${{ inputs.libraryName }}.Benchmark
        sudo ./${{ matrix.version }}/FluentSerializer.${{ inputs.libraryName }}.Benchmark --jobType=${{ inputs.jobType }}
      working-directory: ${{github.workspace}}/src/FluentSerializer.${{ inputs.libraryName }}.Benchmark/bin/Release
    ###
    # 🗃 Collect benchmark reports
    ###
    - name: 🗃 Collect benchmark reports
      if: ${{ always() }}
      run: |-
        sudo mkdir ${{github.workspace}}/benchmark-results
        cd ${{github.workspace}}/src/FluentSerializer.${{ inputs.libraryName }}.Benchmark/bin/Release/BenchmarkDotNet.Artifacts/results
        sudo mv ./${{ inputs.reportPrefix }}-*.md ${{github.workspace}}/benchmark-results/
      working-directory: ${{github.workspace}}
    ###
    # 📈 Report benchmarks
    #
    # Publish benchmark results to job overview
    ###
    - name: 📈 Report benchmarks
      run: |-
        cat ./${{ inputs.reportPrefix }}-benchmark-net_6_0-github.md >>$GITHUB_STEP_SUMMARY
        cat ./${{ inputs.reportPrefix }}-benchmark-netcoreapp_3_1-github.md >>$GITHUB_STEP_SUMMARY
      working-directory: ${{github.workspace}}/src/FluentSerializer.${{ inputs.libraryName }}.Benchmark/bin/Release/BenchmarkDotNet.Artifacts/
    ###
    # 🗃 Publish 'benchmark-results' artifacts
    ###
    - name: 🗃 Publish 'benchmark-results' artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results-${{ inputs.reportPrefix }}-${{ matrix.version }}-${{ matrix.os }}
        path: ${{github.workspace}}/benchmark-results
        retention-days: 20